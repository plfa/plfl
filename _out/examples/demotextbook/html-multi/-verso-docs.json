{"9":
 "<code>DemoTextbook.savedImport : Verso.Doc.Elab.CodeBlockExpander</code><span class=\"sep\"></span><code class=\"docstring\">An import of some other module, to be located in the saved code. Not rendered.\n</code>",
 "8":
 "<code>DemoTextbook.savedLean : Verso.Doc.Elab.CodeBlockExpander</code><span class=\"sep\"></span><code class=\"docstring\">Lean code that is saved to the examples file.\n</code>",
 "7":
 "<code>Verso.Genre.Manual.InlineLean.name : Verso.Doc.Elab.RoleExpander</code>",
 "6":
 "<code>Verso.Genre.Manual.InlineLean.leanSection : Verso.Doc.Elab.DirectiveExpander</code><span class=\"sep\"></span><code class=\"docstring\">Elaborates the contained document in a new section.\n</code>",
 "5":
 "<code>Nat : Type</code><span class=\"sep\"></span><code class=\"docstring\">The natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n</code>",
 "4": "<code>NatList.cons : Nat → NatList → NatList</code>",
 "37":
 "<code>Verso.Genre.Manual.ref (content : Array (Verso.Doc.Inline Manual)) (canonicalName : String)\n  (domain : Option Lean.Name := none) : Verso.Doc.Inline Manual</code><span class=\"sep\"></span><code class=\"docstring\">Inserts a reference to the provided tag.\n</code>",
 "36": "<code>Verso.Genre.Manual.citehere : Verso.Doc.Elab.RoleExpander</code>",
 "35": "<code>Verso.Genre.Manual.citep : Verso.Doc.Elab.RoleExpander</code>",
 "34": "<code>Verso.Genre.Manual.citet : Verso.Doc.Elab.RoleExpander</code>",
 "33": "<code>Verso.Genre.Manual.margin : Verso.Doc.Elab.RoleExpander</code>",
 "32":
 "<code class=\"docstring\">`end` closes a `section` or `namespace` scope. If the scope is named `&lt;id&gt;`, it has to be closed\nwith `end &lt;id&gt;`. The `end` command is optional at the end of a file.\n</code>",
 "31":
 "<code>ReprAtom.{u} (α : Type u) : Type</code><span class=\"sep\"></span><code class=\"docstring\">Auxiliary class for marking types that should be considered atomic by `Repr` methods.\nWe use it at `Repr (List α)` to decide whether `bracketFill` should be used or not. </code>",
 "30":
 "<code>repr.{u_1} {α : Type u_1} [Repr α] (a : α) : Std.Format</code><span class=\"sep\"></span><code class=\"docstring\">Turn `a` into `Format` using its `Repr` instance. The precedence level is initially set to 0.\n</code>",
 "3": "<code>NatList.nil : NatList</code>",
 "29":
 "<code>Nat → _root_.Nat → Std.Format</code><span class=\"sep\"></span><code class=\"docstring\">Turn a value of type `α` into `Format` at a given precedence. The precedence value can be used\nto avoid parentheses if they are not necessary.\n</code>",
 "28":
 "<code>Repr.{u} (α : Type u) : Type u</code><span class=\"sep\"></span><code class=\"docstring\">A typeclass that specifies the standard way of turning values of some type into `Format`.\n\nWhen rendered this `Format` should be as close as possible to something that can be parsed as the\ninput value.\n</code>",
 "27": "<code>MyNats.Nat.toNat : Nat → _root_.Nat</code>",
 "26":
 "<code>Nat → Nat → Nat</code><span class=\"sep\"></span><code class=\"docstring\">`a + b` computes the sum of `a` and `b`. See `HAdd`. </code>",
 "25":
 "<code>Add.{u} (α : Type u) : Type u</code><span class=\"sep\"></span><code class=\"docstring\">The homogeneous version of `HAdd`: `a + b : α` where `a b : α`. </code>",
 "24":
 "<code class=\"docstring\">Pattern matching. `match e, ... with | p, ... =&gt; f | ...` matches each given\nterm `e` against each pattern `p` of a match alternative. When all patterns\nof an alternative match, the `match` term evaluates to the value of the\ncorresponding right-hand side `f` with the pattern variables bound to the\nrespective matched values.\nIf used as `match h : e, ... with | p, ... =&gt; f | ...`, `h : e = p` is available\nwithin `f`.\n\nWhen not constructing a proof, `match` does not automatically substitute variables\nmatched on in dependent variables' types. Use `match (generalizing := true) ...` to\nenforce this.\n\nSyntax quotations can also be used in a pattern match.\nThis matches a `Syntax` value against quotations, pattern variables, or `_`.\n\nQuoted identifiers only match identical identifiers - custom matching such as by the preresolved\nnames only should be done explicitly.\n\n`Syntax.atom`s are ignored during matching by default except when part of a built-in literal.\nFor users introducing new atoms, we recommend wrapping them in dedicated syntax kinds if they\nshould participate in matching.\nFor example, in\n```lean\nsyntax \"c\" (\"foo\" &lt;|&gt; \"bar\") ...\n```\n`foo` and `bar` are indistinguishable during matching, but in\n```lean\nsyntax foo := \"foo\"\nsyntax \"c\" (foo &lt;|&gt; \"bar\") ...\n```\nthey are not.\n</code>",
 "23": "<code>MyNats.Nat.add (n k : Nat) : Nat</code>",
 "22":
 "<code>Nat</code><span class=\"sep\"></span><code class=\"docstring\">The `OfNat.ofNat` function is automatically inserted by the parser when\nthe user writes a numeric literal like `1 : α`. Implementations of this\ntypeclass can therefore customize the behavior of `n : α` based on `n` and\n`α`. </code>",
 "21":
 "<code>OfNat.{u} (α : Type u) : _root_.Nat → Type u</code><span class=\"sep\"></span><code class=\"docstring\">The class `OfNat α n` powers the numeric literal parser. If you write\n`37 : α`, Lean will attempt to synthesize `OfNat α 37`, and will generate\nthe term `(OfNat.ofNat 37 : α)`.\n\nThere is a bit of infinite regress here since the desugaring apparently\nstill contains a literal `37` in it. The type of expressions contains a\nprimitive constructor for \"raw natural number literals\", which you can directly\naccess using the macro `nat_lit 37`. Raw number literals are always of type `Nat`.\nSo it would be more correct to say that Lean looks for an instance of\n`OfNat α (nat_lit 37)`, and it generates the term `(OfNat.ofNat (nat_lit 37) : α)`.\n</code>",
 "20": "<code>_root_.Nat</code>",
 "2": "<code>NatList : Type</code>",
 "19":
 "<code>_root_.Nat : Type</code><span class=\"sep\"></span><code class=\"docstring\">The natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n</code>",
 "18": "<code>MyNats.Nat.ofNat : _root_.Nat → Nat</code>",
 "17": "<code>MyNats.Nat.succ : Nat → Nat</code>",
 "16": "<code>MyNats.Nat.zero : Nat</code>",
 "15": "<code>MyNats.Nat : Type</code>",
 "14":
 "<code class=\"docstring\">`namespace &lt;id&gt;` opens a section with label `&lt;id&gt;` that influences naming and name resolution inside\nthe section:\n* Declarations names are prefixed: `def seventeen : ℕ := 17` inside a namespace `Nat` is given the\n  full name `Nat.seventeen`.\n* Names introduced by `export` declarations are also prefixed by the identifier.\n* All names starting with `&lt;id&gt;.` become available in the namespace without the prefix. These names\n  are preferred over names introduced by outer namespaces or `open`.\n* Within a namespace, declarations can be `protected`, which excludes them from the effects of\n  opening the namespace.\n\nAs with `section`, namespaces can be nested and the scope of a namespace is terminated by a\ncorresponding `end &lt;id&gt;` or the end of the file.\n\n`namespace` also acts like `section` in delimiting the scope of `variable`, `open`, and other scoped commands.\n</code>",
 "13":
 "<code class=\"docstring\">`#eval e` evaluates the expression `e` by compiling and evaluating it.\n\n* The command attempts to use `ToExpr`, `Repr`, or `ToString` instances to print the result.\n* If `e` is a monadic value of type `m ty`, then the command tries to adapt the monad `m`\n  to one of the monads that `#eval` supports, which include `IO`, `CoreM`, `MetaM`, `TermElabM`, and `CommandElabM`.\n  Users can define `MonadEval` instances to extend the list of supported monads.\n\nThe `#eval` command gracefully degrades in capability depending on what is imported.\nImporting the `Lean.Elab.Command` module provides full capabilities.\n\nDue to unsoundness, `#eval` refuses to evaluate expressions that depend on `sorry`, even indirectly,\nsince the presence of `sorry` can lead to runtime instability and crashes.\nThis check can be overridden with the `#eval! e` command.\n\nOptions:\n* If `eval.pp` is true (default: true) then tries to use `ToExpr` instances to make use of the\n  usual pretty printer. Otherwise, only tries using `Repr` and `ToString` instances.\n* If `eval.type` is true (default: false) then pretty prints the type of the evaluated value.\n* If `eval.derive.repr` is true (default: true) then attempts to auto-derive a `Repr` instance\n  when there is no other way to print the result.\n\nSee also: `#reduce e` for evaluation by term reduction.\n</code>",
 "12":
 "<code>Verso.Genre.Manual.InlineLean.leanOutput : Verso.Doc.Elab.CodeBlockExpander</code>",
 "11": "<code>Nat</code>",
 "10": "<code>x : Nat</code>",
 "1":
 "<code class=\"docstring\">In Lean, every concrete type other than the universes\nand every type constructor other than dependent arrows\nis an instance of a general family of type constructions known as inductive types.\nIt is remarkable that it is possible to construct a substantial edifice of mathematics\nbased on nothing more than the type universes, dependent arrow types, and inductive types;\neverything else follows from those.\nIntuitively, an inductive type is built up from a specified list of constructors.\nFor example, `List α` is the list of elements of type `α`, and is defined as follows:\n```\ninductive List (α : Type u) where\n| nil\n| cons (head : α) (tail : List α)\n```\nA list of elements of type `α` is either the empty list, `nil`,\nor an element `head : α` followed by a list `tail : List α`.\nSee [Inductive types](https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html)\nfor more information.\n</code>",
 "0":
 "<code>Verso.Genre.Manual.InlineLean.lean : Verso.Doc.Elab.CodeBlockExpander</code><span class=\"sep\"></span><code class=\"docstring\">Elaborates the provided Lean command in the context of the current Verso module.\n</code>"}